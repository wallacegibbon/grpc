%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.27.3
-module(statistics).

-export([encode_msg/2, encode_msg/3]).

-export([decode_msg/2, decode_msg/3]).

-export([merge_msgs/3, merge_msgs/4]).

-export([verify_msg/2, verify_msg/3]).

-export([get_msg_defs/0]).

-export([get_msg_names/0]).

-export([get_group_names/0]).

-export([get_msg_or_group_names/0]).

-export([get_enum_names/0]).

-export([find_msg_def/1, fetch_msg_def/1]).

-export([find_enum_def/1, fetch_enum_def/1]).

-export([enum_symbol_by_value/2,
         enum_value_by_symbol/2]).

-export(['enum_symbol_by_value_type_parameter.stats_type'/1,
         'enum_value_by_symbol_type_parameter.stats_type'/1]).

-export(['enum_symbol_by_value_thread.thread_type'/1,
         'enum_value_by_symbol_thread.thread_type'/1]).

-export([get_service_names/0]).

-export([get_service_def/1]).

-export([get_rpc_names/1]).

-export([find_rpc_def/2, fetch_rpc_def/2]).

-export([get_package_name/0]).

-export([gpb_version_as_string/0,
         gpb_version_as_list/0]).

-spec encode_msg(_, atom()) -> binary().

encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(_, atom(), list()) -> binary().

encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        counter_stat -> e_msg_counter_stat(Msg, TrUserData);
        type_parameter -> e_msg_type_parameter(Msg, TrUserData);
        thread -> e_msg_thread(Msg, TrUserData);
        stats -> e_msg_stats(Msg, TrUserData)
    end.

e_msg_counter_stat(Msg, TrUserData) ->
    e_msg_counter_stat(Msg, <<>>, TrUserData).

e_msg_counter_stat(#{aux := F1, check_io := F2,
                     emulator := F3, other := F4, port := F5, sleep := F6},
                   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int32(TrF2, <<B1/binary, 16>>)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_type_int32(TrF3, <<B2/binary, 24>>)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_type_int32(TrF4, <<B3/binary, 32>>)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= 0 -> B4;
                       true -> e_type_int32(TrF5, <<B4/binary, 40>>)
                    end
                end
         end,
    if F6 == undefined -> B5;
       true ->
           begin
               TrF6 = id(F6, TrUserData),
               if TrF6 =:= 0 -> B5;
                  true -> e_type_int32(TrF6, <<B5/binary, 48>>)
               end
           end
    end.

e_msg_type_parameter(Msg, TrUserData) ->
    e_msg_type_parameter(Msg, <<>>, TrUserData).

e_msg_type_parameter(#{type_field := F1}, Bin,
                     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= microstate_accounting -> Bin;
                  true ->
                      'e_enum_type_parameter.stats_type'(TrF1,
                                                         <<Bin/binary, 8>>)
               end
           end
    end.

e_msg_thread(Msg, TrUserData) ->
    e_msg_thread(Msg, <<>>, TrUserData).

e_msg_thread(#{counters := F1, id := F2, type := F3},
             Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_thread_counters(TrF1,
                                                    <<Bin/binary, 10>>,
                                                    TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int32(TrF2, <<B1/binary, 16>>)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= async -> B2;
                  true ->
                      'e_enum_thread.thread_type'(TrF3, <<B2/binary, 24>>)
               end
           end
    end.

e_msg_stats(Msg, TrUserData) ->
    e_msg_stats(Msg, <<>>, TrUserData).

e_msg_stats(#{threads := F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_stats_threads(TrF1, Bin, TrUserData)
        end
    end.

e_mfield_thread_counters(Msg, Bin, TrUserData) ->
    SubBin = e_msg_counter_stat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stats_threads(Msg, Bin, TrUserData) ->
    SubBin = e_msg_thread(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_stats_threads([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_stats_threads(id(Elem, TrUserData),
                                  Bin2,
                                  TrUserData),
    e_field_stats_threads(Rest, Bin3, TrUserData);
e_field_stats_threads([], Bin, _TrUserData) -> Bin.

'e_enum_type_parameter.stats_type'(microstate_accounting,
                                   Bin) ->
    <<Bin/binary, 0>>;
'e_enum_type_parameter.stats_type'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_thread.thread_type'(async, Bin) ->
    <<Bin/binary, 0>>;
'e_enum_thread.thread_type'(scheduler, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_thread.thread_type'(aux, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_thread.thread_type'(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        counter_stat -> d_msg_counter_stat(Bin, TrUserData);
        type_parameter -> d_msg_type_parameter(Bin, TrUserData);
        thread -> d_msg_thread(Bin, TrUserData);
        stats -> d_msg_stats(Bin, TrUserData)
    end.

d_msg_counter_stat(Bin, TrUserData) ->
    dfp_read_field_def_counter_stat(Bin,
                                    0,
                                    0,
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    id(0, TrUserData),
                                    TrUserData).

dfp_read_field_def_counter_stat(<<8, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_aux(Rest,
                             Z1,
                             Z2,
                             F1,
                             F2,
                             F3,
                             F4,
                             F5,
                             F6,
                             TrUserData);
dfp_read_field_def_counter_stat(<<16, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_check_io(Rest,
                                  Z1,
                                  Z2,
                                  F1,
                                  F2,
                                  F3,
                                  F4,
                                  F5,
                                  F6,
                                  TrUserData);
dfp_read_field_def_counter_stat(<<24, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_emulator(Rest,
                                  Z1,
                                  Z2,
                                  F1,
                                  F2,
                                  F3,
                                  F4,
                                  F5,
                                  F6,
                                  TrUserData);
dfp_read_field_def_counter_stat(<<32, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_other(Rest,
                               Z1,
                               Z2,
                               F1,
                               F2,
                               F3,
                               F4,
                               F5,
                               F6,
                               TrUserData);
dfp_read_field_def_counter_stat(<<40, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_port(Rest,
                              Z1,
                              Z2,
                              F1,
                              F2,
                              F3,
                              F4,
                              F5,
                              F6,
                              TrUserData);
dfp_read_field_def_counter_stat(<<48, Rest/binary>>, Z1,
                                Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_counter_stat_sleep(Rest,
                               Z1,
                               Z2,
                               F1,
                               F2,
                               F3,
                               F4,
                               F5,
                               F6,
                               TrUserData);
dfp_read_field_def_counter_stat(<<>>, 0, 0, F1, F2, F3,
                                F4, F5, F6, _) ->
    #{aux => F1, check_io => F2, emulator => F3,
      other => F4, port => F5, sleep => F6};
dfp_read_field_def_counter_stat(Other, Z1, Z2, F1, F2,
                                F3, F4, F5, F6, TrUserData) ->
    dg_read_field_def_counter_stat(Other,
                                   Z1,
                                   Z2,
                                   F1,
                                   F2,
                                   F3,
                                   F4,
                                   F5,
                                   F6,
                                   TrUserData).

dg_read_field_def_counter_stat(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_counter_stat(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F1,
                                   F2,
                                   F3,
                                   F4,
                                   F5,
                                   F6,
                                   TrUserData);
dg_read_field_def_counter_stat(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_counter_stat_aux(Rest,
                                     0,
                                     0,
                                     F1,
                                     F2,
                                     F3,
                                     F4,
                                     F5,
                                     F6,
                                     TrUserData);
        16 ->
            d_field_counter_stat_check_io(Rest,
                                          0,
                                          0,
                                          F1,
                                          F2,
                                          F3,
                                          F4,
                                          F5,
                                          F6,
                                          TrUserData);
        24 ->
            d_field_counter_stat_emulator(Rest,
                                          0,
                                          0,
                                          F1,
                                          F2,
                                          F3,
                                          F4,
                                          F5,
                                          F6,
                                          TrUserData);
        32 ->
            d_field_counter_stat_other(Rest,
                                       0,
                                       0,
                                       F1,
                                       F2,
                                       F3,
                                       F4,
                                       F5,
                                       F6,
                                       TrUserData);
        40 ->
            d_field_counter_stat_port(Rest,
                                      0,
                                      0,
                                      F1,
                                      F2,
                                      F3,
                                      F4,
                                      F5,
                                      F6,
                                      TrUserData);
        48 ->
            d_field_counter_stat_sleep(Rest,
                                       0,
                                       0,
                                       F1,
                                       F2,
                                       F3,
                                       F4,
                                       F5,
                                       F6,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_counter_stat(Rest,
                                             0,
                                             0,
                                             F1,
                                             F2,
                                             F3,
                                             F4,
                                             F5,
                                             F6,
                                             TrUserData);
                1 ->
                    skip_64_counter_stat(Rest,
                                         0,
                                         0,
                                         F1,
                                         F2,
                                         F3,
                                         F4,
                                         F5,
                                         F6,
                                         TrUserData);
                2 ->
                    skip_length_delimited_counter_stat(Rest,
                                                       0,
                                                       0,
                                                       F1,
                                                       F2,
                                                       F3,
                                                       F4,
                                                       F5,
                                                       F6,
                                                       TrUserData);
                3 ->
                    skip_group_counter_stat(Rest,
                                            Key bsr 3,
                                            0,
                                            F1,
                                            F2,
                                            F3,
                                            F4,
                                            F5,
                                            F6,
                                            TrUserData);
                5 ->
                    skip_32_counter_stat(Rest,
                                         0,
                                         0,
                                         F1,
                                         F2,
                                         F3,
                                         F4,
                                         F5,
                                         F6,
                                         TrUserData)
            end
    end;
dg_read_field_def_counter_stat(<<>>, 0, 0, F1, F2, F3,
                               F4, F5, F6, _) ->
    #{aux => F1, check_io => F2, emulator => F3,
      other => F4, port => F5, sleep => F6}.

d_field_counter_stat_aux(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_aux(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F1,
                             F2,
                             F3,
                             F4,
                             F5,
                             F6,
                             TrUserData);
d_field_counter_stat_aux(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    NewFValue,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

d_field_counter_stat_check_io(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_check_io(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F1,
                                  F2,
                                  F3,
                                  F4,
                                  F5,
                                  F6,
                                  TrUserData);
d_field_counter_stat_check_io(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    F1,
                                    NewFValue,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

d_field_counter_stat_emulator(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_emulator(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F1,
                                  F2,
                                  F3,
                                  F4,
                                  F5,
                                  F6,
                                  TrUserData);
d_field_counter_stat_emulator(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    NewFValue,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

d_field_counter_stat_other(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_other(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F1,
                               F2,
                               F3,
                               F4,
                               F5,
                               F6,
                               TrUserData);
d_field_counter_stat_other(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    F3,
                                    NewFValue,
                                    F5,
                                    F6,
                                    TrUserData).

d_field_counter_stat_port(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_port(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F1,
                              F2,
                              F3,
                              F4,
                              F5,
                              F6,
                              TrUserData);
d_field_counter_stat_port(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    NewFValue,
                                    F6,
                                    TrUserData).

d_field_counter_stat_sleep(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_counter_stat_sleep(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F1,
                               F2,
                               F3,
                               F4,
                               F5,
                               F6,
                               TrUserData);
d_field_counter_stat_sleep(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F1, F2, F3, F4, F5, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    NewFValue,
                                    TrUserData).

skip_varint_counter_stat(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_counter_stat(Rest,
                             Z1,
                             Z2,
                             F1,
                             F2,
                             F3,
                             F4,
                             F5,
                             F6,
                             TrUserData);
skip_varint_counter_stat(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_counter_stat(Rest,
                                    Z1,
                                    Z2,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

skip_length_delimited_counter_stat(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_counter_stat(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F1,
                                       F2,
                                       F3,
                                       F4,
                                       F5,
                                       F6,
                                       TrUserData);
skip_length_delimited_counter_stat(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F1, F2, F3, F4, F5, F6,
                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_counter_stat(Rest2,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

skip_group_counter_stat(Bin, FNum, Z2, F1, F2, F3, F4,
                        F5, F6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_counter_stat(Rest,
                                    0,
                                    Z2,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

skip_32_counter_stat(<<_:32, Rest/binary>>, Z1, Z2, F1,
                     F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_counter_stat(Rest,
                                    Z1,
                                    Z2,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

skip_64_counter_stat(<<_:64, Rest/binary>>, Z1, Z2, F1,
                     F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_counter_stat(Rest,
                                    Z1,
                                    Z2,
                                    F1,
                                    F2,
                                    F3,
                                    F4,
                                    F5,
                                    F6,
                                    TrUserData).

d_msg_type_parameter(Bin, TrUserData) ->
    dfp_read_field_def_type_parameter(Bin,
                                      0,
                                      0,
                                      id(microstate_accounting, TrUserData),
                                      TrUserData).

dfp_read_field_def_type_parameter(<<8, Rest/binary>>,
                                  Z1, Z2, F1, TrUserData) ->
    d_field_type_parameter_type_field(Rest,
                                      Z1,
                                      Z2,
                                      F1,
                                      TrUserData);
dfp_read_field_def_type_parameter(<<>>, 0, 0, F1, _) ->
    #{type_field => F1};
dfp_read_field_def_type_parameter(Other, Z1, Z2, F1,
                                  TrUserData) ->
    dg_read_field_def_type_parameter(Other,
                                     Z1,
                                     Z2,
                                     F1,
                                     TrUserData).

dg_read_field_def_type_parameter(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_type_parameter(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F1,
                                     TrUserData);
dg_read_field_def_type_parameter(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_type_parameter_type_field(Rest,
                                              0,
                                              0,
                                              F1,
                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_type_parameter(Rest, 0, 0, F1, TrUserData);
                1 -> skip_64_type_parameter(Rest, 0, 0, F1, TrUserData);
                2 ->
                    skip_length_delimited_type_parameter(Rest,
                                                         0,
                                                         0,
                                                         F1,
                                                         TrUserData);
                3 ->
                    skip_group_type_parameter(Rest,
                                              Key bsr 3,
                                              0,
                                              F1,
                                              TrUserData);
                5 -> skip_32_type_parameter(Rest, 0, 0, F1, TrUserData)
            end
    end;
dg_read_field_def_type_parameter(<<>>, 0, 0, F1, _) ->
    #{type_field => F1}.

d_field_type_parameter_type_field(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_type_parameter_type_field(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F1,
                                      TrUserData);
d_field_type_parameter_type_field(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
                                      Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_type_parameter.stats_type'(Tmp),
    dfp_read_field_def_type_parameter(Rest,
                                      0,
                                      0,
                                      NewFValue,
                                      TrUserData).

skip_varint_type_parameter(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, F1, TrUserData) ->
    skip_varint_type_parameter(Rest,
                               Z1,
                               Z2,
                               F1,
                               TrUserData);
skip_varint_type_parameter(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_type_parameter(Rest,
                                      Z1,
                                      Z2,
                                      F1,
                                      TrUserData).

skip_length_delimited_type_parameter(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_type_parameter(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F1,
                                         TrUserData);
skip_length_delimited_type_parameter(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_type_parameter(Rest2,
                                      0,
                                      0,
                                      F1,
                                      TrUserData).

skip_group_type_parameter(Bin, FNum, Z2, F1,
                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_type_parameter(Rest,
                                      0,
                                      Z2,
                                      F1,
                                      TrUserData).

skip_32_type_parameter(<<_:32, Rest/binary>>, Z1, Z2,
                       F1, TrUserData) ->
    dfp_read_field_def_type_parameter(Rest,
                                      Z1,
                                      Z2,
                                      F1,
                                      TrUserData).

skip_64_type_parameter(<<_:64, Rest/binary>>, Z1, Z2,
                       F1, TrUserData) ->
    dfp_read_field_def_type_parameter(Rest,
                                      Z1,
                                      Z2,
                                      F1,
                                      TrUserData).

d_msg_thread(Bin, TrUserData) ->
    dfp_read_field_def_thread(Bin,
                              0,
                              0,
                              id(undefined, TrUserData),
                              id(0, TrUserData),
                              id(async, TrUserData),
                              TrUserData).

dfp_read_field_def_thread(<<10, Rest/binary>>, Z1, Z2,
                          F1, F2, F3, TrUserData) ->
    d_field_thread_counters(Rest,
                            Z1,
                            Z2,
                            F1,
                            F2,
                            F3,
                            TrUserData);
dfp_read_field_def_thread(<<16, Rest/binary>>, Z1, Z2,
                          F1, F2, F3, TrUserData) ->
    d_field_thread_id(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_thread(<<24, Rest/binary>>, Z1, Z2,
                          F1, F2, F3, TrUserData) ->
    d_field_thread_type(Rest,
                        Z1,
                        Z2,
                        F1,
                        F2,
                        F3,
                        TrUserData);
dfp_read_field_def_thread(<<>>, 0, 0, F1, F2, F3, _) ->
    #{counters => F1, id => F2, type => F3};
dfp_read_field_def_thread(Other, Z1, Z2, F1, F2, F3,
                          TrUserData) ->
    dg_read_field_def_thread(Other,
                             Z1,
                             Z2,
                             F1,
                             F2,
                             F3,
                             TrUserData).

dg_read_field_def_thread(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_thread(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F1,
                             F2,
                             F3,
                             TrUserData);
dg_read_field_def_thread(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_thread_counters(Rest,
                                    0,
                                    0,
                                    F1,
                                    F2,
                                    F3,
                                    TrUserData);
        16 ->
            d_field_thread_id(Rest, 0, 0, F1, F2, F3, TrUserData);
        24 ->
            d_field_thread_type(Rest, 0, 0, F1, F2, F3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_thread(Rest, 0, 0, F1, F2, F3, TrUserData);
                1 -> skip_64_thread(Rest, 0, 0, F1, F2, F3, TrUserData);
                2 ->
                    skip_length_delimited_thread(Rest,
                                                 0,
                                                 0,
                                                 F1,
                                                 F2,
                                                 F3,
                                                 TrUserData);
                3 ->
                    skip_group_thread(Rest,
                                      Key bsr 3,
                                      0,
                                      F1,
                                      F2,
                                      F3,
                                      TrUserData);
                5 -> skip_32_thread(Rest, 0, 0, F1, F2, F3, TrUserData)
            end
    end;
dg_read_field_def_thread(<<>>, 0, 0, F1, F2, F3, _) ->
    #{counters => F1, id => F2, type => F3}.

d_field_thread_counters(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_thread_counters(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F1,
                            F2,
                            F3,
                            TrUserData);
d_field_thread_counters(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_counter_stat(Bs, TrUserData),
                   TrUserData),
    dfp_read_field_def_thread(Rest2,
                              0,
                              0,
                              if F1 == undefined -> NewFValue;
                                 true ->
                                     merge_msg_counter_stat(F1,
                                                            NewFValue,
                                                            TrUserData)
                              end,
                              F2,
                              F3,
                              TrUserData).

d_field_thread_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
                  F2, F3, TrUserData)
    when N < 57 ->
    d_field_thread_id(Rest,
                      N + 7,
                      X bsl N + Acc,
                      F1,
                      F2,
                      F3,
                      TrUserData);
d_field_thread_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
                  _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_thread(Rest,
                              0,
                              0,
                              F1,
                              NewFValue,
                              F3,
                              TrUserData).

d_field_thread_type(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_thread_type(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F1,
                        F2,
                        F3,
                        TrUserData);
d_field_thread_type(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F1, F2, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
                                      Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_thread.thread_type'(Tmp),
    dfp_read_field_def_thread(Rest,
                              0,
                              0,
                              F1,
                              F2,
                              NewFValue,
                              TrUserData).

skip_varint_thread(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                   F1, F2, F3, TrUserData) ->
    skip_varint_thread(Rest,
                       Z1,
                       Z2,
                       F1,
                       F2,
                       F3,
                       TrUserData);
skip_varint_thread(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                   F1, F2, F3, TrUserData) ->
    dfp_read_field_def_thread(Rest,
                              Z1,
                              Z2,
                              F1,
                              F2,
                              F3,
                              TrUserData).

skip_length_delimited_thread(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_thread(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F1,
                                 F2,
                                 F3,
                                 TrUserData);
skip_length_delimited_thread(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_thread(Rest2,
                              0,
                              0,
                              F1,
                              F2,
                              F3,
                              TrUserData).

skip_group_thread(Bin, FNum, Z2, F1, F2, F3,
                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_thread(Rest,
                              0,
                              Z2,
                              F1,
                              F2,
                              F3,
                              TrUserData).

skip_32_thread(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
               F3, TrUserData) ->
    dfp_read_field_def_thread(Rest,
                              Z1,
                              Z2,
                              F1,
                              F2,
                              F3,
                              TrUserData).

skip_64_thread(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
               F3, TrUserData) ->
    dfp_read_field_def_thread(Rest,
                              Z1,
                              Z2,
                              F1,
                              F2,
                              F3,
                              TrUserData).

d_msg_stats(Bin, TrUserData) ->
    dfp_read_field_def_stats(Bin,
                             0,
                             0,
                             id([], TrUserData),
                             TrUserData).

dfp_read_field_def_stats(<<10, Rest/binary>>, Z1, Z2,
                         F1, TrUserData) ->
    d_field_stats_threads(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_stats(<<>>, 0, 0, F1, TrUserData) ->
    #{threads => lists_reverse(F1, TrUserData)};
dfp_read_field_def_stats(Other, Z1, Z2, F1,
                         TrUserData) ->
    dg_read_field_def_stats(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_stats(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stats(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F1,
                            TrUserData);
dg_read_field_def_stats(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_stats_threads(Rest, 0, 0, F1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_stats(Rest, 0, 0, F1, TrUserData);
                1 -> skip_64_stats(Rest, 0, 0, F1, TrUserData);
                2 ->
                    skip_length_delimited_stats(Rest, 0, 0, F1, TrUserData);
                3 ->
                    skip_group_stats(Rest, Key bsr 3, 0, F1, TrUserData);
                5 -> skip_32_stats(Rest, 0, 0, F1, TrUserData)
            end
    end;
dg_read_field_def_stats(<<>>, 0, 0, F1, TrUserData) ->
    #{threads => lists_reverse(F1, TrUserData)}.

d_field_stats_threads(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F1, TrUserData)
    when N < 57 ->
    d_field_stats_threads(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F1,
                          TrUserData);
d_field_stats_threads(<<0:1, X:7, Rest/binary>>, N, Acc,
                      F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_thread(Bs, TrUserData),
                   TrUserData),
    dfp_read_field_def_stats(Rest2,
                             0,
                             0,
                             cons(NewFValue, F1, TrUserData),
                             TrUserData).

skip_varint_stats(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
                  TrUserData) ->
    skip_varint_stats(Rest, Z1, Z2, F1, TrUserData);
skip_varint_stats(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
                  TrUserData) ->
    dfp_read_field_def_stats(Rest, Z1, Z2, F1, TrUserData).

skip_length_delimited_stats(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_stats(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F1,
                                TrUserData);
skip_length_delimited_stats(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stats(Rest2, 0, 0, F1, TrUserData).

skip_group_stats(Bin, FNum, Z2, F1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stats(Rest, 0, Z2, F1, TrUserData).

skip_32_stats(<<_:32, Rest/binary>>, Z1, Z2, F1,
              TrUserData) ->
    dfp_read_field_def_stats(Rest, Z1, Z2, F1, TrUserData).

skip_64_stats(<<_:64, Rest/binary>>, Z1, Z2, F1,
              TrUserData) ->
    dfp_read_field_def_stats(Rest, Z1, Z2, F1, TrUserData).

'd_enum_type_parameter.stats_type'(0) ->
    microstate_accounting;
'd_enum_type_parameter.stats_type'(V) -> V.

'd_enum_thread.thread_type'(0) -> async;
'd_enum_thread.thread_type'(1) -> scheduler;
'd_enum_thread.thread_type'(2) -> aux;
'd_enum_thread.thread_type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin,
                                      0,
                                      0,
                                      0,
                                      0,
                                      FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary,
      Rest/binary>> =
        Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes,
          TagLen, FieldNum)
    when N < 32 - 7 ->
    read_gr_b(Tl,
              N + 7,
              X bsl N + Acc,
              NumBytes,
              TagLen + 1,
              FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes,
          TagLen, FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2,
                      0,
                      0,
                      NumBytes + TagLen1 + 8,
                      0,
                      FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2,
                      0,
                      0,
                      NumBytes + TagLen1 + 4,
                      0,
                      FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes,
           FieldNum)
    when N < 64 - 7 ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes,
           FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes,
           FieldNum)
    when N < 64 - 7 ->
    read_gr_ld(Tl,
               N + 7,
               X bsl N + Acc,
               NumBytes + 1,
               FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes,
           FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        counter_stat ->
            merge_msg_counter_stat(Prev, New, TrUserData);
        type_parameter ->
            merge_msg_type_parameter(Prev, New, TrUserData);
        thread -> merge_msg_thread(Prev, New, TrUserData);
        stats -> merge_msg_stats(Prev, New, TrUserData)
    end.

merge_msg_counter_stat(#{aux := PFaux,
                         check_io := PFcheck_io, emulator := PFemulator,
                         other := PFother, port := PFport, sleep := PFsleep},
                       #{aux := NFaux, check_io := NFcheck_io,
                         emulator := NFemulator, other := NFother,
                         port := NFport, sleep := NFsleep},
                       _) ->
    #{aux =>
          if NFaux =:= undefined -> PFaux;
             true -> NFaux
          end,
      check_io =>
          if NFcheck_io =:= undefined -> PFcheck_io;
             true -> NFcheck_io
          end,
      emulator =>
          if NFemulator =:= undefined -> PFemulator;
             true -> NFemulator
          end,
      other =>
          if NFother =:= undefined -> PFother;
             true -> NFother
          end,
      port =>
          if NFport =:= undefined -> PFport;
             true -> NFport
          end,
      sleep =>
          if NFsleep =:= undefined -> PFsleep;
             true -> NFsleep
          end}.

merge_msg_type_parameter(#{type_field := PFtype_field},
                         #{type_field := NFtype_field}, _) ->
    #{type_field =>
          if NFtype_field =:= undefined -> PFtype_field;
             true -> NFtype_field
          end}.

merge_msg_thread(#{counters := PFcounters, id := PFid,
                   type := PFtype},
                 #{counters := NFcounters, id := NFid, type := NFtype},
                 TrUserData) ->
    #{counters =>
          if PFcounters /= undefined, NFcounters /= undefined ->
                 merge_msg_counter_stat(PFcounters,
                                        NFcounters,
                                        TrUserData);
             PFcounters == undefined -> NFcounters;
             NFcounters == undefined -> PFcounters
          end,
      id =>
          if NFid =:= undefined -> PFid;
             true -> NFid
          end,
      type =>
          if NFtype =:= undefined -> PFtype;
             true -> NFtype
          end}.

merge_msg_stats(#{threads := PFthreads},
                #{threads := NFthreads}, TrUserData) ->
    #{threads =>
          if PFthreads /= undefined, NFthreads /= undefined ->
                 'erlang_++'(PFthreads, NFthreads, TrUserData);
             PFthreads == undefined -> NFthreads;
             NFthreads == undefined -> PFthreads
          end}.

verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        counter_stat ->
            v_msg_counter_stat(Msg, [counter_stat], TrUserData);
        type_parameter ->
            v_msg_type_parameter(Msg, [type_parameter], TrUserData);
        thread -> v_msg_thread(Msg, [thread], TrUserData);
        stats -> v_msg_stats(Msg, [stats], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.

-dialyzer({nowarn_function, {v_msg_counter_stat, 3}}).

v_msg_counter_stat(#{aux := F1, check_io := F2,
                     emulator := F3, other := F4, port := F5, sleep := F6},
                   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [aux | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [check_io | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [emulator | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [other | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [port | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [sleep | Path])
    end,
    ok;
v_msg_counter_stat(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [aux, check_io, emulator, other, port, sleep] --
                       maps:keys(M),
                   counter_stat},
                  M,
                  Path);
v_msg_counter_stat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, counter_stat}, X, Path).

-dialyzer({nowarn_function, {v_msg_type_parameter, 3}}).

v_msg_type_parameter(#{type_field := F1}, Path, _) ->
    if F1 == undefined -> ok;
       true ->
           'v_enum_type_parameter.stats_type'(F1,
                                              [type_field | Path])
    end,
    ok;
v_msg_type_parameter(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [type_field] -- maps:keys(M),
                   type_parameter},
                  M,
                  Path);
v_msg_type_parameter(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, type_parameter}, X, Path).

-dialyzer({nowarn_function, {v_msg_thread, 3}}).

v_msg_thread(#{counters := F1, id := F2, type := F3},
             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_counter_stat(F1, [counters | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [id | Path])
    end,
    if F3 == undefined -> ok;
       true -> 'v_enum_thread.thread_type'(F3, [type | Path])
    end,
    ok;
v_msg_thread(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [counters, id, type] -- maps:keys(M),
                   thread},
                  M,
                  Path);
v_msg_thread(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, thread}, X, Path).

-dialyzer({nowarn_function, {v_msg_stats, 3}}).

v_msg_stats(#{threads := F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_thread(Elem, [threads | Path], TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of, {msg, thread}},
                         F1,
                         [threads | Path])
    end,
    ok;
v_msg_stats(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [threads] -- maps:keys(M),
                   stats},
                  M,
                  Path);
v_msg_stats(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stats}, X, Path).

-dialyzer({nowarn_function,
           {'v_enum_type_parameter.stats_type', 2}}).

'v_enum_type_parameter.stats_type'(microstate_accounting,
                                   _Path) ->
    ok;
'v_enum_type_parameter.stats_type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_type_parameter.stats_type'(X, Path) ->
    mk_type_error({invalid_enum,
                   'type_parameter.stats_type'},
                  X,
                  Path).

-dialyzer({nowarn_function,
           {'v_enum_thread.thread_type', 2}}).

'v_enum_thread.thread_type'(async, _Path) -> ok;
'v_enum_thread.thread_type'(scheduler, _Path) -> ok;
'v_enum_thread.thread_type'(aux, _Path) -> ok;
'v_enum_thread.thread_type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_thread.thread_type'(X, Path) ->
    mk_type_error({invalid_enum, 'thread.thread_type'},
                  X,
                  Path).

-dialyzer({nowarn_function, {v_type_sint32, 2}}).

v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-dialyzer({nowarn_function, {v_type_int32, 2}}).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
                  N,
                  Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32},
                  X,
                  Path).

-spec mk_type_error(_, _, list()) -> no_return().

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).

prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
                                       lists:reverse(PathR)),
                             ".")).

-compile({inline, {id, 2}}).

id(X, _TrUserData) -> X.

-compile({inline, {cons, 3}}).

cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline, {lists_reverse, 2}}).

lists_reverse(L, _TrUserData) -> lists:reverse(L).

-compile({inline, {'erlang_++', 3}}).

'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'type_parameter.stats_type'},
      [{microstate_accounting, 0}]},
     {{enum, 'thread.thread_type'},
      [{async, 0}, {scheduler, 1}, {aux, 2}]},
     {{msg, counter_stat},
      [#{name => aux, fnum => 1, rnum => 2, type => int32,
         occurrence => optional, opts => []},
       #{name => check_io, fnum => 2, rnum => 3, type => int32,
         occurrence => optional, opts => []},
       #{name => emulator, fnum => 3, rnum => 4, type => int32,
         occurrence => optional, opts => []},
       #{name => other, fnum => 4, rnum => 5, type => int32,
         occurrence => optional, opts => []},
       #{name => port, fnum => 5, rnum => 6, type => int32,
         occurrence => optional, opts => []},
       #{name => sleep, fnum => 6, rnum => 7, type => int32,
         occurrence => optional, opts => []}]},
     {{msg, type_parameter},
      [#{name => type_field, fnum => 1, rnum => 2,
         type => {enum, 'type_parameter.stats_type'},
         occurrence => optional, opts => []}]},
     {{msg, thread},
      [#{name => counters, fnum => 1, rnum => 2,
         type => {msg, counter_stat}, occurrence => optional,
         opts => []},
       #{name => id, fnum => 2, rnum => 3, type => int32,
         occurrence => optional, opts => []},
       #{name => type, fnum => 3, rnum => 4,
         type => {enum, 'thread.thread_type'},
         occurrence => optional, opts => []}]},
     {{msg, stats},
      [#{name => threads, fnum => 1, rnum => 2,
         type => {msg, thread}, occurrence => repeated,
         opts => []}]}].

get_msg_names() ->
    [counter_stat, type_parameter, thread, stats].

get_group_names() -> [].

get_msg_or_group_names() ->
    [counter_stat, type_parameter, thread, stats].

get_enum_names() ->
    ['type_parameter.stats_type', 'thread.thread_type'].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def(counter_stat) ->
    [#{name => aux, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => check_io, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => emulator, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => other, fnum => 4, rnum => 5, type => int32,
       occurrence => optional, opts => []},
     #{name => port, fnum => 5, rnum => 6, type => int32,
       occurrence => optional, opts => []},
     #{name => sleep, fnum => 6, rnum => 7, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(type_parameter) ->
    [#{name => type_field, fnum => 1, rnum => 2,
       type => {enum, 'type_parameter.stats_type'},
       occurrence => optional, opts => []}];
find_msg_def(thread) ->
    [#{name => counters, fnum => 1, rnum => 2,
       type => {msg, counter_stat}, occurrence => optional,
       opts => []},
     #{name => id, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => type, fnum => 3, rnum => 4,
       type => {enum, 'thread.thread_type'},
       occurrence => optional, opts => []}];
find_msg_def(stats) ->
    [#{name => threads, fnum => 1, rnum => 2,
       type => {msg, thread}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.

find_enum_def('type_parameter.stats_type') ->
    [{microstate_accounting, 0}];
find_enum_def('thread.thread_type') ->
    [{async, 0}, {scheduler, 1}, {aux, 2}];
find_enum_def(_) -> error.

enum_symbol_by_value('type_parameter.stats_type',
                     Value) ->
    'enum_symbol_by_value_type_parameter.stats_type'(Value);
enum_symbol_by_value('thread.thread_type', Value) ->
    'enum_symbol_by_value_thread.thread_type'(Value).

enum_value_by_symbol('type_parameter.stats_type',
                     Sym) ->
    'enum_value_by_symbol_type_parameter.stats_type'(Sym);
enum_value_by_symbol('thread.thread_type', Sym) ->
    'enum_value_by_symbol_thread.thread_type'(Sym).

'enum_symbol_by_value_type_parameter.stats_type'(0) ->
    microstate_accounting.

'enum_value_by_symbol_type_parameter.stats_type'(microstate_accounting) ->
    0.

'enum_symbol_by_value_thread.thread_type'(0) -> async;
'enum_symbol_by_value_thread.thread_type'(1) ->
    scheduler;
'enum_symbol_by_value_thread.thread_type'(2) -> aux.

'enum_value_by_symbol_thread.thread_type'(async) -> 0;
'enum_value_by_symbol_thread.thread_type'(scheduler) ->
    1;
'enum_value_by_symbol_thread.thread_type'(aux) -> 2.

get_service_names() -> [get_stats].

get_service_def(get_stats) ->
    {{service, get_stats},
     [#{name => get_stats, input => type_parameter,
        output => stats, input_stream => false,
        output_stream => false, opts => []}]};
get_service_def(_) -> error.

get_rpc_names(get_stats) -> [get_stats];
get_rpc_names(_) -> error.

find_rpc_def(get_stats, RpcName) ->
    find_rpc_def_get_stats(RpcName);
find_rpc_def(_, _) -> error.

find_rpc_def_get_stats(get_stats) ->
    #{name => get_stats, input => type_parameter,
      output => stats, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_get_stats(_) -> error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

get_package_name() -> statistics.

gpb_version_as_string() -> "3.27.3".

gpb_version_as_list() -> [3, 27, 3].
